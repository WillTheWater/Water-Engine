# ======================================================================================
#                               Game Template Cmake
# ======================================================================================
add_executable(${GAME_TEMPLATE_TARGET_NAME}
	${CMAKE_CURRENT_SOURCE_DIR}/include/gameFramework/Game.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/gameFramework/Game.cpp
)

target_include_directories(${GAME_TEMPLATE_TARGET_NAME} PUBLIC
	${CMAKE_CURRENT_SOURCE_DIR}/include/
)

target_link_libraries(${GAME_TEMPLATE_TARGET_NAME} PUBLIC 
${WATER_ENGINE_TARGET_NAME})

function(CopyLibDirToTarget LIB_NAME TARGET_NAME) # custom function to repeat post build for each dll
	# This copies the dll's into the build folder as a post build process
	add_custom_command(
	TARGET ${TARGET_NAME}
	POST_BUILD
	COMMAND
	${CMAKE_COMMAND} -E copy_directory
	$<TARGET_FILE_DIR:${LIB_NAME}>
	$<TARGET_FILE_DIR:${TARGET_NAME}>
	)
endfunction()
CopyLibDirToTarget(${WATER_ENGINE_TARGET_NAME} ${GAME_TEMPLATE_TARGET_NAME})

# Sets up the asset folder to be copied for the executable
set(RESOURCE_FOLDER_NAME "assets")
set(RESOURCE_SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}/${RESOURCE_FOLDER_NAME}")

add_custom_command(
	TARGET ${GAME_TEMPLATE_TARGET_NAME}
	POST_BUILD
	COMMAND
	${CMAKE_COMMAND} -E copy_directory
	${RESOURCE_SRC_DIR}
	$<TARGET_FILE_DIR:${GAME_TEMPLATE_TARGET_NAME}>/${RESOURCE_FOLDER_NAME}
)

configure_file(
	"config.h.in"
	"${CMAKE_CURRENT_SOURCE_DIR}/include/config.h" ESCAPE_QUOTES
)
